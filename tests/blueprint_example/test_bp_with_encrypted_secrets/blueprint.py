# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa
import sys
import inspect

from calm.dsl.builtins import *  # no_qa
from calm.dsl.config import get_context


DSL_CONFIG = json.loads(read_local_file(".tests/config.json"))

VLAN1211 = DSL_CONFIG["ACCOUNTS"]["NTNX_LOCAL_AZ"]["SUBNETS"][1]["NAME"]
CLUSTER = DSL_CONFIG["ACCOUNTS"]["NTNX_LOCAL_AZ"]["SUBNETS"][1]["CLUSTER"]


# Credentials
BP_CRED_test_cred = basic_cred(
    "root",
    "jb02u2ASweL9fk1FDVBARRiNysEYZq3DppvF7sR78t2kluUQn9pFq0wW:utf-8",
    name="test_cred",
    type="PASSWORD",
    default=True,
)

BP_CRED_test_cred_new = basic_cred(
    "root_new",
    "new cred",
    name="test_cred_new",
    type="PASSWORD",
    default=True,
)


class Service2(Service):
    @action
    def S2CustomAction1(name="S2 Custom Action1"):

        s2_action_var1_new = CalmVariable.Simple.Secret(
            "dns5FH268+BSWxaX3PzFwxg8uFIF9R85s4B1Zi3bgbn8zaw=:utf-8",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        CalmTask.HTTP.get(
            "https://example.com",
            headers={},
            secret_headers={
                "sec key": "6iwtnnNG/sO90LQPnFKWpipXEx6a5kwslmGLK8U6QNcRXNk=:utf-8"
            },
            content_type="",
            verify=False,
            status_mapping={500: True},
            response_paths={},
            name="My Task 1",
            target=ref(Service2),
        )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 1
    vCPUs = 1
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromImageService("Ubuntu1404", bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress(VLAN1211, cluster=CLUSTER)]


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name=CLUSTER)


class VM1(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
    )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 1
    vCPUs = 1
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService("CentOS-7-cloudinit", bootable=True)
    ]
    nics = [AhvVmNic.NormalNic.ingress(VLAN1211, cluster=CLUSTER)]


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources
    cluster = Ref.Cluster(name=CLUSTER)


class VM2(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
    )


class Service1(Service):

    dependencies = [ref(Service2)]

    service1_sec_var1 = CalmVariable.Simple.Secret(
        "updated_value",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def Custom_Action1():

        s1_action_var1 = CalmVariable.Simple.Secret(
            "UrXSrF8Fhj4L9awNi+GFCYRIuHBdyczU3sYKmCRcygoSh+M=:utf-8",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )

    @action
    def Action2():

        CalmTask.HTTP.get(
            "https://example.com",
            headers={},
            secret_headers={"sec key 1": "plain value"},
            content_type="",
            verify=False,
            status_mapping={500: True},
            response_paths={},
            name="Task 1",
            target=ref(Service1),
            cred=ref(BP_CRED_test_cred),
        )
        Service1.Custom_Action1(name="Custom_Action1")


class Package2(Package):

    services = [ref(Service2)]


class Package1(Package):

    services = [ref(Service1)]


class _1ea11b81_deployment(Deployment):

    name = "1ea11b81_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package2)]
    substrate = ref(VM2)


class _4154072f_deployment(Deployment):

    name = "4154072f_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [_4154072f_deployment, _1ea11b81_deployment]

    @action
    def CustomAppProfileAction(name="Custom App Profile Action"):

        app_profile_action_sec_var = CalmVariable.Simple.Secret(
            "KTRlhX5r7/d5jbgMR4SA+xDofn1nz6e4yiqK5MphxSB1m1c=:utf-8",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )


class test_mbp_123321(Blueprint):

    services = [Service1, Service2]
    packages = [Package1, Package2]
    substrates = [VM1, VM2]
    profiles = [Default]
    credentials = [BP_CRED_test_cred, BP_CRED_test_cred_new]
