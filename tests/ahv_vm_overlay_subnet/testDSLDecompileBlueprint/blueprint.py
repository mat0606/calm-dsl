# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_root_PASSWORD = read_local_file("BP_CRED_root_PASSWORD")

# Credentials
BP_CRED_root = basic_cred(
    "root",
    BP_CRED_root_PASSWORD,
    name="root",
    type="PASSWORD",
    default=True,
)


class Service1(Service):

    pass


class vmcalm_timeResources(AhvVmResources):

    memory = 2
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService("Centos7HadoopMaster", bootable=True)
    ]
    nics = [
        AhvVmNic.NormalNic.ingress(
            "post_upgrade_subnets_001", vpc="VPC_post_upgrade_001"
        )
    ]


class vmcalm_time(AhvVm):

    name = "vm-@@{calm_time}@@"
    resources = vmcalm_timeResources
    cluster = Ref.Cluster(name="auto_cluster_prod_4f0aae5add8e")


class VM1(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_time

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
        credential=ref(BP_CRED_root),
    )


class Package1(Package):

    services = [ref(Service1)]


class _964c79f7_deployment(Deployment):

    name = "964c79f7_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(Package1)]
    substrate = ref(VM1)


class Default(Profile):

    deployments = [_964c79f7_deployment]

    @action
    def TestProfileAction():

        CalmTask.HTTP.get(
            "http://127.0.0.1:12345/health",
            headers={},
            secret_headers={},
            content_type="text/html",
            verify=False,
            status_mapping={200: True},
            response_paths={},
            name="HTTPTaskWithTunnel",
            target=ref(Service1),
            tunnel=Ref.Tunnel(name="NewNetworkGroupTunnel2"),
        )
        CalmTask.SetVariable.escript(
            name="SetVariableTaskWithTunnel",
            filename=os.path.join(
                "scripts",
                "Profile_Default_Action_TestProfileAction_Task_SetVariableTaskWithTunnel.py",
            ),
            target=ref(Service1),
            variables=["var1"],
            tunnel=Ref.Tunnel(name="NewNetworkGroupTunnel2"),
        )
        CalmTask.Exec.escript(
            name="Task3",
            filename=os.path.join(
                "scripts", "Profile_Default_Action_TestProfileAction_Task_Task3.py"
            ),
            target=ref(Service1),
        )


class testDSLDecompileBlueprint(Blueprint):

    services = [Service1]
    packages = [Package1]
    substrates = [VM1]
    profiles = [Default]
    credentials = [BP_CRED_root]


class BpMetadata(Metadata):

    categories = {"TemplateType": "Vm"}
