# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_Centos_KEY = read_local_file("BP_CRED_Centos_KEY")

# Credentials
BP_CRED_Centos = basic_cred(
    "centos",
    BP_CRED_Centos_KEY,
    name="Centos",
    type="KEY",
    default=True,
)


centos_disk = vm_disk_package(
    name="centos_disk",
    description="",
    config={
        "name": "centos_disk",
        "image": {
            "name": "centos_disk",
            "type": "DISK_IMAGE",
            "source": "http://download.nutanix.com/calm/CentOS-7-x86_64-1810.qcow2",
            "architecture": "X86_64",
        },
        "product": {"name": "centos_disk", "version": "1.0"},
        "checksum": {},
    },
)


class HelloService(Service):
    """Sample Service"""

    ENV = CalmVariable.WithOptions(
        ["DEV", "PROD"],
        label="",
        default="DEV",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="",
    )

    @action
    def __create__():
        """System action for creating an application"""

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action___create___Task_Task1.sh"
            ),
            target=ref(HelloService),
        )

    @action
    def __start__():
        """System action for starting an application"""

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action___start___Task_Task1.sh"
            ),
            target=ref(HelloService),
        )

    @action
    def __stop__():
        """System action for stopping an application"""

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action___stop___Task_Task1.sh"
            ),
            target=ref(HelloService),
        )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action___delete___Task_Task1.sh"
            ),
            target=ref(HelloService),
        )

    @action
    def custom_action_1():
        """Sample service action"""

        CalmTask.Exec.ssh(
            name="Task11",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action_custom_action_1_Task_Task11.sh"
            ),
            target=ref(HelloService),
        )
        CalmTask.Exec.ssh(
            name="Task12",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action_custom_action_1_Task_Task12.sh"
            ),
            target=ref(HelloService),
        )

    @action
    def custom_action_2():

        CalmTask.Exec.ssh(
            name="Task21",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action_custom_action_2_Task_Task21.sh"
            ),
            target=ref(HelloService),
        )
        with parallel():
            CalmTask.Exec.ssh(
                name="Task22a",
                filename=os.path.join(
                    "scripts",
                    "Service_HelloService_Action_custom_action_2_Task_Task22a.sh",
                ),
                target=ref(HelloService),
            )
            CalmTask.Exec.ssh(
                name="Task22b",
                filename=os.path.join(
                    "scripts",
                    "Service_HelloService_Action_custom_action_2_Task_Task22b.sh",
                ),
                target=ref(HelloService),
            )
        CalmTask.Exec.ssh(
            name="Task23",
            filename=os.path.join(
                "scripts", "Service_HelloService_Action_custom_action_2_Task_Task23.sh"
            ),
            target=ref(HelloService),
        )


class HelloVmResources(AhvVmResources):

    memory = 4
    vCPUs = 2
    cores_per_vCPU = 1
    disks = [AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(centos_disk, bootable=True)]
    nics = [AhvVmNic.NormalNic.ingress("SkSubnet", vpc="Sk_VPC")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join("specs", "HelloVm_cloud_init_data.yaml")
    )


class HelloVm(AhvVm):

    resources = HelloVmResources
    cluster_reference = Ref.Cluster(name="auto_cluster_prod_1a619308826b")
    categories = {"AppFamily": "Demo", "AppType": "Default"}


class HelloSubstrate(Substrate):
    """AHV VM Substrate"""

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = HelloVm

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="60",
    )

    @action
    def __pre_create__():

        CalmTask.Exec.escript(
            name="Task1",
            filename=os.path.join(
                "scripts",
                "Substrate_HelloSubstrate_Action___pre_create___Task_Task1.py",
            ),
            target=ref(HelloSubstrate),
        )

    @action
    def __post_delete__():

        CalmTask.Exec.escript(
            name="Task1",
            filename=os.path.join(
                "scripts",
                "Substrate_HelloSubstrate_Action___post_delete___Task_Task1.py",
            ),
            target=ref(HelloSubstrate),
        )


class HelloPackage(Package):
    """Sample Package"""

    services = [ref(HelloService)]
    sample_pkg_var = CalmVariable.Simple(
        "Sample package installation",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts", "Package_HelloPackage_Action___install___Task_Task1.sh"
            ),
            target=ref(HelloService),
        )

    @action
    def __uninstall__():

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts", "Package_HelloPackage_Action___uninstall___Task_Task1.sh"
            ),
            target=ref(HelloService),
        )


class HelloDeployment(Deployment):
    """Sample Deployment"""

    min_replicas = "1"
    max_replicas = "1"

    packages = [ref(HelloPackage)]
    substrate = ref(HelloSubstrate)


class HelloProfile(Profile):

    deployments = [HelloDeployment]

    var1 = CalmVariable.Simple(
        "sample_val1",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    var2 = CalmVariable.Simple(
        "sample_val2",
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )

    var3 = CalmVariable.Simple.int(
        "2",
        label="",
        regex="^[\d]*$",
        validate_regex=True,
        is_mandatory=False,
        is_hidden=False,
        runtime=False,
        description="",
    )

    @action
    def custom_profile_action_1():
        """Sample description for a profile action"""

        CalmTask.Exec.ssh(
            name="Task1",
            filename=os.path.join(
                "scripts",
                "Profile_HelloProfile_Action_custom_profile_action_1_Task_Task1.sh",
            ),
            target=ref(HelloService),
        )
        HelloService.custom_action_1(name="Task6")


class Hello2(Blueprint):
    """Sample blueprint for Hello app using AHV VM"""

    services = [HelloService]
    packages = [HelloPackage, centos_disk]
    substrates = [HelloSubstrate]
    profiles = [HelloProfile]
    credentials = [BP_CRED_Centos]
